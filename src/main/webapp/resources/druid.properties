spring.datasource.driverClassName=net.sourceforge.jtds.jdbc.Driver
spring.datasource.url=jdbc:jtds:sqlserver://localhost:1433/xmsyfxpg
spring.datasource.username=sa
spring.datasource.password=root
#初始化链接数量
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=50
#获取连接等待超时的时间6秒
spring.datasource.maxWait=6000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
#配置一个连接在池中最小生存的时间
spring.datasource.minEvictableIdleTimeMillis=300000
#打开PSCache，并且指定每个连接上PSCache的大小
#是否缓存preparedStatement，也就是PSCache。
#PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.testOnBorrow=false
#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
spring.datasource.testOnReturn=false
#执行测试连接的sql语句
spring.datasource.validationQuery=SELECT 1


spring.datasource2.driverClassName=net.sourceforge.jtds.jdbc.Driver
spring.datasource2.url=jdbc:jtds:sqlserver://localhost:1433/test
spring.datasource2.username=sa
spring.datasource2.password=root
#初始化链接数量
spring.datasource2.initialSize=5
spring.datasource2.minIdle=5
spring.datasource2.maxActive=50
#获取连接等待超时的时间6秒
spring.datasource2.maxWait=6000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource2.timeBetweenEvictionRunsMillis=60000
#配置一个连接在池中最小生存的时间
spring.datasource2.minEvictableIdleTimeMillis=300000
#打开PSCache，并且指定每个连接上PSCache的大小
#是否缓存preparedStatement，也就是PSCache。
#PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
spring.datasource2.poolPreparedStatements=true
spring.datasource2.maxPoolPreparedStatementPerConnectionSize=20
#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource2.testOnBorrow=false
#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
spring.datasource2.testOnReturn=false
#执行测试连接的sql语句
spring.datasource2.validationQuery=SELECT 1



